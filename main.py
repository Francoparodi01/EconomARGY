import os
import requests
from dotenv import load_dotenv
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
from pymongo import MongoClient
from datetime import datetime
import threading
import io
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Cargar las variables de entorno
load_dotenv()

# Variables globales
telegram_token = os.getenv("Telegram_Token")
chat_id = os.getenv("chat_id")
url_ambito = os.getenv("url_ambito")
url_backend = os.getenv("Backend_URL")
chat_id_user = os.getenv("chat_id_user")
url_inflacion = os.getenv("url_inflacion")
MONGO_URI = os.getenv("MONGO_URI")
url_riesgo_pais = os.getenv("url_riesgo_pais")

# Verificar que todas las variables est√©n definidas
if not all([telegram_token, chat_id, url_ambito, chat_id_user, url_inflacion, MONGO_URI, url_riesgo_pais]):
    raise RuntimeError("Faltan variables de entorno obligatorias.")

# Crear el bot de Telegram
bot = Bot(token=telegram_token)

# Conexi√≥n con la base de datos MongoDB
client = MongoClient(MONGO_URI)
db = client["cotizaciones"]
collection = db["dolar"]
collection_diario = db["dolar_diario"]

# Obtener los datos de Ambito
def get_dolar_values():
    try:
        response = requests.get(f"{url_ambito}")
        response.raise_for_status()  # Verifica si la respuesta es exitosa
        data = response.json()  
        if isinstance(data, list) and all("casa" in item for item in data):
            return data
        else:
            print("‚ö†Ô∏è La respuesta de la API no tiene el formato esperado.")
            return None
    except requests.exceptions.RequestException as e:
        print(f"Error al obtener datos: {e}")
        return None

# Obtener los datos de Inflaci√≥n
def get_inflation_data():
    try:
        response = requests.get(url_inflacion)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error al obtener datos: {e}")
        return None

# Obtener ultimo dato riesgo pais
def get_riesgo_pais():
    try:
        response = requests.get(url_riesgo_pais)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error al obtener datos: {e}")
        return None
    
async def enviar_inflacion(update: Update, context: CallbackContext):
    # Recupera los argumentos de fecha enviados por el usuario
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("Por favor, proporciona dos fechas en el formato 'YYYY-MM YYYY-MM'.")
        return

    start_date = args[0]
    end_date = args[1]

    # Validar las fechas en formato 'YYYY-MM'
    try:
        datetime.strptime(start_date, '%Y-%m')
        datetime.strptime(end_date, '%Y-%m')
    except ValueError:
        await update.message.reply_text("Las fechas deben estar en el formato 'YYYY-MM'.")
        return

    # Convertir las fechas a objetos datetime, estableciendo el d√≠a como el primer d√≠a del mes
    start_date_obj = datetime.strptime(start_date, '%Y-%m').replace(day=1)
    end_date_obj = datetime.strptime(end_date, '%Y-%m').replace(day=1)

    # Obtener los datos de inflaci√≥n
    data = get_inflation_data()
    if not data:
        await update.message.reply_text("No se pudieron obtener los datos de inflaci√≥n.")
        return

    # Filtrar los datos en el rango de fechas
    filtered_data = [entry for entry in data if start_date_obj <= datetime.strptime(entry['fecha'], '%Y-%m-%d') < end_date_obj]

    if not filtered_data:
        await update.message.reply_text("No hay datos disponibles para el rango de fechas especificado.")
        return

    # Generar el gr√°fico de inflaci√≥n en el rango de fechas
    imagen_buffer = plot_inflation(filtered_data, start_date_obj, end_date_obj)
    
    if imagen_buffer:
        await update.message.reply_photo(photo=imagen_buffer, caption=f"Gr√°fico de la inflaci√≥n desde {start_date} hasta {end_date}.")
    else:
        await update.message.reply_text("No se pudo generar el gr√°fico de inflaci√≥n.")

# Funciones para Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"¬°Hola! Soy tu bot econ√≥mico. Usa /help para ver los comandos disponibles."
    )

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Comandos disponibles:\n"
        " - /start: Iniciar el bot.\n"
        " - /help: Ver esta ayuda.\n"
        " - /dolar [tipo]: Consultar el precio del d√≥lar (oficial, blue, etc.).\n"
        " - /check_dolar: Iniciar notificaciones de cambios en el d√≥lar."
    )

# Funci√≥n para almacenar los valores del d√≥lar en la base de datos
async def update_dolar_values(data, update: Update):
    try:
        for dolar in data:
            document = {
                "_id": f"{dolar['moneda']}_{dolar['casa']}",  # Combinamos moneda y casa para crear un identificador √∫nico
                "moneda": dolar["moneda"],
                "casa": dolar["casa"],
                "nombre": dolar["nombre"],
                "compra": dolar["compra"],
                "venta": dolar["venta"],
                "fechaActualizacion": datetime.strptime(dolar["fechaActualizacion"], "%Y-%m-%dT%H:%M:%S.%fZ")
            }

            # Intentamos actualizar o insertar el valor
            result = collection.update_one(
                {"_id": document["_id"]},
                {"$set": document},
                upsert=True
            )
            # Si se actualiz√≥ el valor, notificarlo
            if result.modified_count > 0:
                # Enviar mensaje al chat
                await update.message.reply_text(f"‚úÖ Valor actualizado: D√≥lar {document['nombre']} - Compra: {document['compra']} / Venta: {document['venta']}")
    except Exception as e:
        print(f"Error al actualizar los valores del d√≥lar: {e}")


async def obtener_todos_los_dolares(update: Update, context: CallbackContext):
    try:
        # Obtener todos los documentos de la colecci√≥n de la base de datos
        documentos = list(collection.find().sort("fechaActualizacion", -1))  # Ordenar por fecha descendente
        
        if not documentos:
            await update.message.reply_text("‚ö†Ô∏è No se encontraron datos de la base de datos.")
            return

        # Crear un mensaje con todos los datos de todos los tipos de d√≥lar
        mensaje = "üìä Datos completos del d√≥lar:\n\n"
        for doc in documentos:
            # Extraer los valores del documento
            moneda = doc.get("moneda", "Desconocido")
            casa = doc.get("casa", "Desconocida")
            nombre = doc.get("nombre", "Desconocido")
            compra = doc.get("compra", 0)
            venta = doc.get("venta", 0)
            fecha_actualizacion = doc.get("fechaActualizacion")

            # Verificar si la fecha es un objeto datetime y formatear adecuadamente
            if isinstance(fecha_actualizacion, datetime):
                fecha_formateada = fecha_actualizacion.strftime("%d/%m/%Y %H:%M:%S")
            else:
                fecha_formateada = "Desconocida"

            # Construir el mensaje
            mensaje += f"üè† Dolar: {nombre} \n"
            mensaje += f"üí∞ Compra: {compra:.2f} ARS\n"
            mensaje += f"üí∏ Venta: {venta:.2f} ARS\n\n"
            mensaje += f"üìÖ √∫ltima actualizaci√≥n: {fecha_formateada}\n"

        # Verificar el l√≠mite de caracteres de Telegram y enviar el mensaje
        if len(mensaje) > 4096:
            # Dividir el mensaje en partes y enviarlas
            for i in range(0, len(mensaje), 4096):
                await update.message.reply_text(mensaje[i:i + 4096], parse_mode="Markdown")
        else:
            # Enviar el mensaje completo
            await update.message.reply_text(mensaje, parse_mode="Markdown")

    except Exception as e:
        print(f"Error en obtener_todos_los_dolares: {e}")
        await update.message.reply_text("‚ö†Ô∏è Ocurri√≥ un error al obtener los datos del d√≥lar.")




# Funci√≥n para obtener el valor del d√≥lar desde la base de datos
async def get_dolar_from_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tipo = context.args[0].lower() if context.args else "oficial"
    dolar = collection.find_one({"moneda": "USD", "casa": tipo})

    # Si se encontraron datos, enviar el mensaje
    if dolar:
        fecha_actualizacion = dolar['fechaActualizacion']
        fecha_formateada = fecha_actualizacion.strftime("%Y-%m-%d %H:%M")
        await update.message.reply_text(
            f"üíµ *D√≥lar {dolar['nombre']}*\n"
            f"üü¢ Compra: {dolar['compra']} ARS\n"
            f"üî¥ Venta: {dolar['venta']} ARS\n"
            f"üìÖ √öltima actualizaci√≥n: {fecha_formateada}",
            parse_mode="Markdown",
        )
    else:
        await update.message.reply_text("No se encontraron datos para el tipo de d√≥lar solicitado.")


# Funci√≥n para almacenar los valores del d√≥lar en la base de datos
async def store_dolar_values(update: Update):
    try:
        # Obtener los valores del d√≥lar
        data = get_dolar_values()
        if data:
            print("‚ÑπÔ∏è Datos obtenidos correctamente para almacenar en la base de datos.")
            # Procesar y almacenar los datos
            for dolar in data:
                document = {
                    "_id": f"{dolar['moneda']}_{dolar['casa']}",
                    "moneda": dolar["moneda"],
                    "casa": dolar["casa"],
                    "nombre": dolar["nombre"],
                    "compra": dolar["compra"],
                    "venta": dolar["venta"],
                    "fechaActualizacion": datetime.strptime(dolar["fechaActualizacion"], "%Y-%m-%dT%H:%M:%S.%fZ"),
                }

                # Insertar o actualizar el documento en la base de datos
                result = collection.update_one({"_id": document["_id"]}, {"$set": document}, upsert=True)

                # Informar al usuario de la actualizaci√≥n
                if result.upserted_id or result.modified_count > 0:
                    await update.message.reply_text(
                        f"‚úÖ Valor actualizado: D√≥lar {document['nombre']} - "
                        f"Compra: {document['compra']} / Venta: {document['venta']}"
                    )
        else:
            await update.message.reply_text("‚ö†Ô∏è No se pudieron obtener los valores del d√≥lar.")
    except Exception as e:
        print(f"Error al almacenar valores del d√≥lar: {e}")
        await update.message.reply_text("‚ö†Ô∏è Ocurri√≥ un error al almacenar los valores del d√≥lar.")


# Funci√≥n para verificar y notificar cambios en los valores del d√≥lar
async def check_and_notify_changes(context: CallbackContext):
    try:
        # Obtener datos de la API
        data = get_dolar_values()
        if data:
            # Reutilizar la l√≥gica de almacenamiento
            for dolar in data:
                document = {
                    "_id": f"{dolar['moneda']}_{dolar['casa']}",
                    "moneda": dolar["moneda"],
                    "casa": dolar["casa"],
                    "nombre": dolar["nombre"],
                    "compra": dolar["compra"],
                    "venta": dolar["venta"],
                    "fechaActualizacion": datetime.strptime(dolar["fechaActualizacion"], "%Y-%m-%dT%H:%M:%S.%fZ"),
                }

                # Verificar si existe en la base de datos
                existing_doc = collection.find_one({"_id": document["_id"]})
                if existing_doc and (
                    existing_doc["compra"] != document["compra"] or existing_doc["venta"] != document["venta"]
                ):
                    # Notificar cambios
                    await context.bot.send_message(
                        chat_id=context.job.data["chat_id"],
                        text=(f"üîî *Actualizaci√≥n de D√≥lar {document['nombre']}*\n"
                              f"üü¢ Compra: {document['compra']} ARS\n"
                              f"üî¥ Venta: {document['venta']} ARS\n"
                              f"üìÖ √öltima actualizaci√≥n: {document['fechaActualizacion']:%Y-%m-%d %H:%M}"),
                        parse_mode="Markdown",
                    )

                # Almacenar o actualizar en la base de datos
                collection.update_one({"_id": document["_id"]}, {"$set": document}, upsert=True)
    except Exception as e:
        print(f"Error en check_and_notify_changes: {e}")


async def start_periodic_check(update: Update, context: CallbackContext):
    try:
        # Inicia el trabajo peri√≥dico
        context.job_queue.run_repeating(
            check_and_notify_changes,
            interval=10, 
            first=5,  
            data={"chat_id": update.effective_chat.id},  # Pasar el chat_id como datos
        )
        await update.message.reply_text("üîÑ El bot notificar√° actualizaciones en los valores del d√≥lar.")
    except Exception as e:
        print(f"‚ö†Ô∏è Error al iniciar la verificaci√≥n peri√≥dica: {e}")
        await update.message.reply_text("‚ö†Ô∏è Ocurri√≥ un error al iniciar la verificaci√≥n peri√≥dica.")

async def analisis_semanal_dolar(update: Update):
    try:
        # Obtener la fecha de hoy y la fecha hace 7 d√≠as
        hoy = datetime.now().date()
        hace_7_dias = hoy - timedelta(days=7)

        # Buscar los valores de la semana en la colecci√≥n
        documentos_semanales = collection_diario.find({"fecha": {"$gte": hace_7_dias, "$lte": hoy}})
        
        if not documentos_semanales:
            await update.message.reply_text("‚ö†Ô∏è No se encontraron datos de la semana para el an√°lisis.")
            return

        # Crear listas para los datos de compra y venta
        fechas = []
        compras = []
        ventas = []

        for doc in documentos_semanales:
            fechas.append(doc["fecha"])
            compras.append(doc["compra"])
            ventas.append(doc["venta"])

        # Calcular las variaciones
        variacion_compra = compras[-1] - compras[0]
        variacion_venta = ventas[-1] - ventas[0]

        # Generar gr√°fico
        plt.figure(figsize=(10, 5))
        plt.plot(fechas, compras, label="Compra (ARS)", marker='o')
        plt.plot(fechas, ventas, label="Venta (ARS)", marker='o')
        plt.xlabel("Fecha")
        plt.ylabel("Valor (ARS)")
        plt.title("An√°lisis Semanal del D√≥lar")
        plt.legend()
        plt.grid(True)

        # Guardar la imagen del gr√°fico en un buffer de memoria
        imagen_buffer = io.BytesIO()
        plt.savefig(imagen_buffer, format='png')
        imagen_buffer.seek(0)

        # Enviar el gr√°fico por Telegram
        await update.message.reply_photo(photo=imagen_buffer, caption=(
            f"üìà An√°lisis semanal del d√≥lar:\n"
            f"Variaci√≥n de la compra: {variacion_compra:.2f} ARS\n"
            f"Variaci√≥n de la venta: {variacion_venta:.2f} ARS"
        ))

    except Exception as e:
        print(f"Error en analisis_semanal_dolar: {e}")
        await update.message.reply_text("‚ö†Ô∏è Ocurri√≥ un error al generar el an√°lisis semanal del d√≥lar.")
        


# --------------------------- GR√ÅFICOS MATPLOTLIB ------------------------------
def plot_inflation(data, start_date, end_date):
    # Filtra los datos para incluir solo los que est√°n en el rango de fecha proporcionado
    filtered_data = [entry for entry in data if start_date <= datetime.strptime(entry['fecha'], '%Y-%m-%d').replace(day=1) < end_date]

    if not filtered_data:
        print("No hay datos para el rango de fechas especificado.")
        return None

    # Generar gr√°fico
    fechas = [datetime.strptime(entry['fecha'], '%Y-%m-%d').replace(day=1) for entry in filtered_data]
    valores = [entry['valor'] for entry in filtered_data]

    plt.figure(figsize=(12, 6))
    plt.plot(fechas, valores, marker='o', linestyle='-', color='b')
    plt.title(f'Inflaci√≥n de {start_date.strftime("%B %Y")} a {end_date.strftime("%B %Y")}')
    plt.xlabel('Fecha')
    plt.ylabel('Inflaci√≥n (%)')
    plt.grid(True)
    
    # Guardar en un buffer de memoria
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()

    return buf


# Funci√≥n principal de Telegram
def main():
    print("Iniciando el bot de Telegram...")

    app = Application.builder().token(telegram_token).build()

    # Comandos de Telegram 
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help))
    app.add_handler(CommandHandler("dolar", get_dolar_from_db))
    app.add_handler(CommandHandler("dolares", obtener_todos_los_dolares))
    app.add_handler(CommandHandler("check_dolar", start_periodic_check))
    app.add_handler(CommandHandler("inflacion", enviar_inflacion))

    
    app.run_polling()

if __name__ == "__main__":
    main()